// <auto-generated />
using System;
using Ecoinmerce.Infra.Repository.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecoinmerce.Infra.Repository.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20230107005402_FixingBlockHashLength")]
    partial class FixingBlockHashLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ValidityInDays")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("ApiCredentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjczMDUyODQxLCJleHAiOjE2NzQ3ODA4NDEsImlhdCI6MTY3MzA1Mjg0MX0.HI58Fg6YsP3MCAhMMlG3SMf5m6b63qA7rFwcQh_pSkQ",
                            AccessTokenExpiry = new DateTime(2023, 1, 27, 0, 54, 1, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 697, DateTimeKind.Local).AddTicks(9214),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 1,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 697, DateTimeKind.Local).AddTicks(9215),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjczMDUyODQxLCJleHAiOjE2NzQ3ODA4NDEsImlhdCI6MTY3MzA1Mjg0MX0.ChpendLYoTlL7QpUn_EOM_x6rQGGm8l7KNEW6CwCtH8",
                            AccessTokenExpiry = new DateTime(2023, 1, 27, 0, 54, 1, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 723, DateTimeKind.Local).AddTicks(9382),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 2,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 723, DateTimeKind.Local).AddTicks(9382),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1Mjg0MSwiZXhwIjoxNjc0NzgwODQxLCJpYXQiOjE2NzMwNTI4NDF9.BqAtR3ZXepP6yf9wyxwgyZPQX_HDOHdbBOnUCa_nKyM",
                            AccessTokenExpiry = new DateTime(2023, 1, 27, 0, 54, 1, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 757, DateTimeKind.Local).AddTicks(1414),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 3,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 757, DateTimeKind.Local).AddTicks(1415),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("AverageAnnualBilling")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("AverageTotalEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SocialReason")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.HasIndex("Cnpj", "Email")
                        .IsUnique();

                    b.ToTable("Ecommerces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageAnnualBilling = 10000000m,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 697, DateTimeKind.Local).AddTicks(9208),
                            Email = "angelopiletti@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 1,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 697, DateTimeKind.Local).AddTicks(9210),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 2,
                            AverageAnnualBilling = 10000000m,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 723, DateTimeKind.Local).AddTicks(9373),
                            Email = "bruna.fusiger@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 2,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 723, DateTimeKind.Local).AddTicks(9374),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 3,
                            AverageAnnualBilling = 10000000m,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 757, DateTimeKind.Local).AddTicks(1404),
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 3,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 757, DateTimeKind.Local).AddTicks(1406),
                            Website = "https://google.com"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvQWRtaW4iLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwicm9sZSI6IiIsIm5iZiI6MTY3MzA1Mjg0MSwiZXhwIjoxNjczMDk2MDQxLCJpYXQiOjE2NzMwNTI4NDF9.Kyue3nXZ3gyJgUZNljUx5Auf4DoI3khEOcT4Y5Ev9nU",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 54, 1, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 687, DateTimeKind.Local).AddTicks(7128),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "oA8rYPbC8Mg0sUiGPSaoqFWQ07BmOCTWOQHR4ndM9qM=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb0FkbWluIiwiZW1haWwiOiJhbmdlbG9waWxldHRpQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1Mjg0MSwiZXhwIjoxNjczMjI1NjQxLCJpYXQiOjE2NzMwNTI4NDF9.AbPvS-6gwldmpsd2rNa2-74JITenYrZikRVB-Bhaxa4",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 54, 1, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 185, 50, 66, 160, 221, 197, 63, 166, 199, 112, 129, 247, 120, 148, 239, 145, 21, 27, 130, 248, 248, 110, 243, 16, 132, 236, 199, 117, 109, 115, 191, 20, 183, 65, 12, 73, 43, 178, 172, 223 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 687, DateTimeKind.Local).AddTicks(7129),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "angeloAdmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYUFkbWluIiwiZW1haWwiOiJicnVuYS5mdXNpZ2VyQGdtYWlsLmNvbSIsInJvbGUiOiIiLCJuYmYiOjE2NzMwNTI4NDEsImV4cCI6MTY3MzA5NjA0MSwiaWF0IjoxNjczMDUyODQxfQ.S5te8LYfAYmcVGMsgZbyddutzfMgiDU79UtYLr6PbA8",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 54, 1, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 713, DateTimeKind.Local).AddTicks(2901),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "17O6O81GEXyDCssTGD4SLaRvLiLRwBEEgFuqem5gnrk=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hQWRtaW4iLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjczMDUyODQxLCJleHAiOjE2NzMyMjU2NDEsImlhdCI6MTY3MzA1Mjg0MX0.5ufYxv6IxTZd1h37doBxxx-e0daZWI4CxAk1eL7RVSo",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 54, 1, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 238, 253, 230, 32, 147, 145, 160, 59, 5, 236, 171, 83, 55, 96, 77, 206, 170, 183, 235, 132, 248, 13, 176, 55, 93, 218, 23, 52, 222, 121, 221, 148, 217, 101, 120, 202, 88, 176, 224, 233 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 713, DateTimeKind.Local).AddTicks(2902),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "brunaAdmin"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc0FkbWluIiwiZW1haWwiOiJsdWNhc29saXZlaXJhLmNvbnRhdG9ubGluZUBnbWFpbC5jb20iLCJyb2xlIjoiIiwibmJmIjoxNjczMDUyODQxLCJleHAiOjE2NzMwOTYwNDEsImlhdCI6MTY3MzA1Mjg0MX0.1HIevvXD5XwySUGtCXcTQyAEhbuUYum1vUyaimBdTNU",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 54, 1, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 739, DateTimeKind.Local).AddTicks(1095),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "YCsUfdt28RKfnhTKpCbZFo8eVZVEwv+Zl0dpjYLYhVE=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzQWRtaW4iLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1Mjg0MSwiZXhwIjoxNjczMjI1NjQxLCJpYXQiOjE2NzMwNTI4NDF9.BqZx6nNXCXaIgS13J_Adgf07S_hDTe4YlyE94NJKxDc",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 54, 1, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 171, 108, 83, 26, 201, 242, 12, 86, 166, 206, 195, 63, 191, 119, 142, 187, 187, 75, 191, 202, 87, 122, 50, 239, 193, 176, 91, 176, 16, 195, 20, 230, 9, 15, 22, 94, 152, 135, 131, 80 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 739, DateTimeKind.Local).AddTicks(1095),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "lucasAdmin"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvTWFuYWdlciIsImVtYWlsIjoiYW5nZWxvcGlsZXR0aUBnbWFpbC5jb20iLCJuYmYiOjE2NzMwNTI4NDEsImV4cCI6MTY3MzA5NjA0MSwiaWF0IjoxNjczMDUyODQxfQ.KRduO2el28OgJyQswhSOGD95c2nT7oQ1BsLviB3oOas",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 54, 1, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 677, DateTimeKind.Local).AddTicks(4780),
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "TJuovWeCJ/BBS6EG55fczfprOwxv9qzTxQtAdk/DhXM=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb01hbmFnZXIiLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjczMDUyODQxLCJleHAiOjE2NzMyMjU2NDEsImlhdCI6MTY3MzA1Mjg0MX0.gxjjWvK9p_e4apcBhPwqWxxipfuSQ7pH-xdE7T1gdAQ",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 54, 1, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 11, 63, 126, 125, 8, 42, 68, 74, 144, 65, 237, 203, 200, 20, 145, 98, 163, 65, 138, 172, 132, 183, 235, 197, 207, 96, 167, 127, 107, 242, 49, 203, 26, 35, 167, 205, 150, 206, 28, 200 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 677, DateTimeKind.Local).AddTicks(4790),
                            Username = "angeloManager"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYU1hbmFnZXIiLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjczMDUyODQxLCJleHAiOjE2NzMwOTYwNDEsImlhdCI6MTY3MzA1Mjg0MX0.uy2mwm5iZp-GUN5cxQ3T2Z_NuBbkm7djAkrnMl5cBjY",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 54, 1, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 702, DateTimeKind.Local).AddTicks(6446),
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "b/ot1tTQ9Gj30kr11LUx3533ybk0kE81PoVOdLgTSiM=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hTWFuYWdlciIsImVtYWlsIjoiYnJ1bmEuZnVzaWdlckBnbWFpbC5jb20iLCJuYmYiOjE2NzMwNTI4NDEsImV4cCI6MTY3MzIyNTY0MSwiaWF0IjoxNjczMDUyODQxfQ.-KwspJo9EUHeh_Psl8SXHnYWt1Xaae9Ik5QJId7dWwg",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 54, 1, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 132, 222, 50, 182, 135, 147, 23, 231, 190, 110, 241, 8, 160, 67, 234, 178, 85, 55, 226, 212, 52, 133, 71, 135, 154, 142, 13, 46, 171, 83, 111, 166, 172, 47, 117, 251, 249, 152, 16, 74 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 702, DateTimeKind.Local).AddTicks(6448),
                            Username = "brunaManager"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc01hbmFnZXIiLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1Mjg0MSwiZXhwIjoxNjczMDk2MDQxLCJpYXQiOjE2NzMwNTI4NDF9.5g4g0SP3PkAdPI0aq9_sijOa8Yon13-zyP2KSfhPuoY",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 54, 1, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 728, DateTimeKind.Local).AddTicks(7773),
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "FwZBcLhKUoyvPAuY1DinV66Tl0al5B+eQhzcymfYV1w=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzTWFuYWdlciIsImVtYWlsIjoibHVjYXNvbGl2ZWlyYS5jb250YXRvbmxpbmVAZ21haWwuY29tIiwibmJmIjoxNjczMDUyODQxLCJleHAiOjE2NzMyMjU2NDEsImlhdCI6MTY3MzA1Mjg0MX0.VD_rHppevjr5fgDNA02ViOC8quywWIuLgFfQmwKrvk8",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 54, 1, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 171, 236, 54, 73, 190, 51, 216, 137, 120, 39, 78, 208, 88, 86, 11, 47, 110, 223, 28, 87, 42, 207, 98, 144, 95, 69, 240, 93, 242, 197, 3, 2, 178, 109, 126, 96, 1, 67, 73, 43 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 728, DateTimeKind.Local).AddTicks(7774),
                            Username = "lucasManager"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInternalCustody")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("EtherWallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "0x83596d3984C65c48D9f167ada9698BECFa709571",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 702, DateTimeKind.Local).AddTicks(6190),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            IsDeleted = false,
                            IsInternalCustody = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x879b22729079d26717c15544e85f3692229b481368ea4b5a65ca289a5c26db53",
                            PublicKey = "0489249214e77e5d07d2de2e63b82f5e2029e4d0d739a341a166e6363db1c338e749f11823ded16954ba15070dd496f109a9655c7b9cd08417538ed5ac8d1216b2",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 702, DateTimeKind.Local).AddTicks(6198),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 2,
                            Address = "0xd49B964c84132F43e3d1Ed3A7b67B57304Cb6fB3",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 728, DateTimeKind.Local).AddTicks(7500),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            IsDeleted = false,
                            IsInternalCustody = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x830226e76d7cb5d86d6b2754a4626984cfffbfc8cb477e3665877d753da9111f",
                            PublicKey = "045a0df1485dd7614bc5eb51b5612638040d5f835d1c310320ad73a051eb0391f5f953aa3c701b3e6ec8efaee2217adbfb32fb78f27eaef8203b9d6e5417f1f129",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 728, DateTimeKind.Local).AddTicks(7510),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 3,
                            Address = "0xecE385e3Fd686DA0959e375E155B036C3eb34774",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 765, DateTimeKind.Local).AddTicks(5017),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            IsDeleted = false,
                            IsInternalCustody = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x5178945d19f0a66cfaa52cb4b03a139d402bb682a13aaf94e75ba74bb26f55e5",
                            PublicKey = "04c8867096480458cfdebf46cef3132bb0f17ab94a53de0192ff8ef25994ce19960c7cdd0a1f1d5513e270be4898cb5c0c20e6b5044f0dd49c1844e519d331e921",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 54, 1, 765, DateTimeKind.Local).AddTicks(5034),
                            UpdatedBy = "SYSTEM SEED"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CostumerWalletAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("EcommerceWalletAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("Observation")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PurchaseCheckId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseEventFailId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseEventId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.HasIndex("PurchaseCheckId")
                        .IsUnique();

                    b.HasIndex("PurchaseEventFailId")
                        .IsUnique();

                    b.HasIndex("PurchaseEventId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CheckOverCounter")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PurchaseChecks");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaidInEther")
                        .HasPrecision(28, 18)
                        .HasColumnType("decimal(28,18)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseIdentifier")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PurchaseEvents");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEventFail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("LogAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<string>("Observation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PurchaseEventFails");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EcommerceAdminId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceAdminId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleBond");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("ApiCredentials")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceManager", "Manager")
                        .WithOne("Ecommerce")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Ecommerce", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("Admins")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("EtherWallets")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("Purchases")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.PurchaseCheck", "PurchaseCheck")
                        .WithOne("Purchase")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Purchase", "PurchaseCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.PurchaseEventFail", "PurchaseEventFail")
                        .WithOne("Purchase")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Purchase", "PurchaseEventFailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.PurchaseEvent", "PurchaseEvent")
                        .WithOne("Purchase")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Purchase", "PurchaseEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");

                    b.Navigation("PurchaseCheck");

                    b.Navigation("PurchaseEvent");

                    b.Navigation("PurchaseEventFail");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceAdmin", "EcommerceAdmin")
                        .WithMany("RoleBonds")
                        .HasForeignKey("EcommerceAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.Role", "Role")
                        .WithMany("RoleBonds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceAdmin");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("ApiCredentials");

                    b.Navigation("EtherWallets");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Navigation("RoleBonds");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseCheck", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEvent", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEventFail", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleBonds");
                });
#pragma warning restore 612, 618
        }
    }
}
