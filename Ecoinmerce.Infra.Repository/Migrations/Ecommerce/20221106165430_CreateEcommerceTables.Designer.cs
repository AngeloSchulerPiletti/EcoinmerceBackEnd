// <auto-generated />
using System;
using Ecoinmerce.Infra.Repository.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecoinmerce.Infra.Repository.Migrations.Ecommerce
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20221106165430_CreateEcommerceTables")]
    partial class CreateEcommerceTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ValidityInDays")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("ApiCredentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjY3NzUzNjY5LCJleHAiOjE2Njk0ODE2NjksImlhdCI6MTY2Nzc1MzY2OX0.a22eO9zUjfUG7KXAS82SwjyLLvu_n_2gKWKI31hW1nY",
                            AccessTokenExpiry = new DateTime(2022, 11, 26, 16, 54, 29, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 968, DateTimeKind.Local).AddTicks(8166),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 1,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 968, DateTimeKind.Local).AddTicks(8168),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjY3NzUzNjcwLCJleHAiOjE2Njk0ODE2NzAsImlhdCI6MTY2Nzc1MzY3MH0.gaY8YSN7zhJQxrSI_eKpj1XjslzzM-Vejqfmfkli2Ks",
                            AccessTokenExpiry = new DateTime(2022, 11, 26, 16, 54, 30, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 9, DateTimeKind.Local).AddTicks(4792),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 2,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 9, DateTimeKind.Local).AddTicks(4794),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzc1MzY3MCwiZXhwIjoxNjY5NDgxNjcwLCJpYXQiOjE2Njc3NTM2NzB9.lvOrWOWfMgpIG1oosHYtv43dRzltqNWmyrgLl64m4u4",
                            AccessTokenExpiry = new DateTime(2022, 11, 26, 16, 54, 30, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 47, DateTimeKind.Local).AddTicks(5701),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 3,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 47, DateTimeKind.Local).AddTicks(5702),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AverageAnualBiling")
                        .HasColumnType("int");

                    b.Property<int?>("AverageTotalEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SocialReason")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.HasIndex("Cnpj", "Email")
                        .IsUnique();

                    b.ToTable("Ecommerces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageAnualBiling = 10000000,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 968, DateTimeKind.Local).AddTicks(8151),
                            Email = "angelopiletti@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 1,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 968, DateTimeKind.Local).AddTicks(8155),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 2,
                            AverageAnualBiling = 10000000,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 9, DateTimeKind.Local).AddTicks(4779),
                            Email = "bruna.fusiger@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 2,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 9, DateTimeKind.Local).AddTicks(4783),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 3,
                            AverageAnualBiling = 10000000,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 47, DateTimeKind.Local).AddTicks(5690),
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 3,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 47, DateTimeKind.Local).AddTicks(5692),
                            Website = "https://google.com"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvQWRtaW4iLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwicm9sZSI6IiIsIm5iZiI6MTY2Nzc1MzY2OSwiZXhwIjoxNjY3Nzk2ODY5LCJpYXQiOjE2Njc3NTM2Njl9.8hf20Qs0j9MktyzhLOyAOTlaIlp7O8Fb-TKz0h_dKkY",
                            AccessTokenExpiry = new DateTime(2022, 11, 7, 4, 54, 29, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 951, DateTimeKind.Local).AddTicks(8435),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "r81PijBAoTAPZ4BZAaO35pIlP4BaXb157yeBrD8qZ0w=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb0FkbWluIiwiZW1haWwiOiJhbmdlbG9waWxldHRpQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzc1MzY2OSwiZXhwIjoxNjY3OTI2NDY5LCJpYXQiOjE2Njc3NTM2Njl9.BG8YxT2ZhsL-zv77rT3l3GqGP96v9HDlJaBSUL5er2w",
                            RefreshTokenExpiry = new DateTime(2022, 11, 8, 16, 54, 29, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 117, 78, 252, 120, 206, 189, 210, 166, 21, 136, 174, 153, 111, 233, 99, 222, 159, 117, 253, 15, 34, 62, 24, 51, 206, 155, 85, 162, 38, 227, 240, 21, 233, 102, 156, 179, 131, 203, 120, 90 },
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 951, DateTimeKind.Local).AddTicks(8438),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "angeloAdmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYUFkbWluIiwiZW1haWwiOiJicnVuYS5mdXNpZ2VyQGdtYWlsLmNvbSIsInJvbGUiOiIiLCJuYmYiOjE2Njc3NTM2NzAsImV4cCI6MTY2Nzc5Njg3MCwiaWF0IjoxNjY3NzUzNjcwfQ.-CuETKjaYeEhdSwf25S6yzpjJEDWn_FV1nTMekeZdLE",
                            AccessTokenExpiry = new DateTime(2022, 11, 7, 4, 54, 30, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 993, DateTimeKind.Local).AddTicks(1746),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "n7UMJuYz92m4s9qib+q4x35ijaTtTgc6jeyQ1uc6SnA=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hQWRtaW4iLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjY3NzUzNjcwLCJleHAiOjE2Njc5MjY0NzAsImlhdCI6MTY2Nzc1MzY3MH0.qRfJlrJE7tixUIQWNgRpHOCR2SRvCE4qAhOVduFWadw",
                            RefreshTokenExpiry = new DateTime(2022, 11, 8, 16, 54, 30, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 56, 76, 38, 58, 219, 170, 128, 145, 111, 251, 241, 53, 160, 31, 16, 212, 117, 32, 149, 92, 36, 32, 85, 254, 216, 140, 187, 150, 186, 52, 248, 62, 19, 115, 1, 55, 225, 141, 73, 235 },
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 993, DateTimeKind.Local).AddTicks(1749),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "brunaAdmin"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc0FkbWluIiwiZW1haWwiOiJsdWNhc29saXZlaXJhLmNvbnRhdG9ubGluZUBnbWFpbC5jb20iLCJyb2xlIjoiIiwibmJmIjoxNjY3NzUzNjcwLCJleHAiOjE2Njc3OTY4NzAsImlhdCI6MTY2Nzc1MzY3MH0.8LrIQNkf1bCnqAf6Ena2lzHonXWZRf-GXwKIQIiOwKI",
                            AccessTokenExpiry = new DateTime(2022, 11, 7, 4, 54, 30, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 32, DateTimeKind.Local).AddTicks(8397),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "6trvQ+D4HDHNQCiXT9xLxZH/bfiInQjdhtUJlBzZdDk=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzQWRtaW4iLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzc1MzY3MCwiZXhwIjoxNjY3OTI2NDcwLCJpYXQiOjE2Njc3NTM2NzB9.h7EQZhlp2_ptC3P2lEcJOmt8I_Vi-rKzQrNs4tMg4n0",
                            RefreshTokenExpiry = new DateTime(2022, 11, 8, 16, 54, 30, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 142, 253, 172, 162, 201, 73, 152, 243, 70, 100, 115, 89, 111, 215, 171, 92, 178, 35, 27, 154, 220, 65, 19, 170, 250, 64, 182, 176, 160, 148, 74, 202, 64, 178, 251, 158, 238, 76, 127, 51 },
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 32, DateTimeKind.Local).AddTicks(8400),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "lucasAdmin"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvTWFuYWdlciIsImVtYWlsIjoiYW5nZWxvcGlsZXR0aUBnbWFpbC5jb20iLCJuYmYiOjE2Njc3NTM2NjksImV4cCI6MTY2Nzc5Njg2OSwiaWF0IjoxNjY3NzUzNjY5fQ.EcKzl5wEKukGulGinbFgGAJ-2jWJPbKdtlO8FdTUYUo",
                            AccessTokenExpiry = new DateTime(2022, 11, 7, 4, 54, 29, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 935, DateTimeKind.Local).AddTicks(682),
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "2dEUZqWXAnWWrNdsauA13gQ0P0AtU43ElCDceARc2C0=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb01hbmFnZXIiLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjY3NzUzNjY5LCJleHAiOjE2Njc5MjY0NjksImlhdCI6MTY2Nzc1MzY2OX0.daHLMURqrgw3eEVbxY7RSBLqIJF3vcIpdYzrHOchjpI",
                            RefreshTokenExpiry = new DateTime(2022, 11, 8, 16, 54, 29, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 251, 150, 143, 28, 141, 152, 121, 32, 79, 252, 150, 200, 134, 140, 16, 140, 60, 51, 131, 0, 196, 89, 91, 114, 5, 209, 227, 26, 246, 50, 245, 90, 106, 243, 252, 242, 227, 238, 194, 148 },
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 935, DateTimeKind.Local).AddTicks(719),
                            Username = "angeloManager"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYU1hbmFnZXIiLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjY3NzUzNjY5LCJleHAiOjE2Njc3OTY4NjksImlhdCI6MTY2Nzc1MzY2OX0._qabhQfXUeqXRHBooQ0sA0AgGyeacAYmTztCg4F2gVs",
                            AccessTokenExpiry = new DateTime(2022, 11, 7, 4, 54, 29, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 976, DateTimeKind.Local).AddTicks(7249),
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "cGRom+5rCg86YgjSu1QO31gZCM2IgZ3/ByGIogPHuG0=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hTWFuYWdlciIsImVtYWlsIjoiYnJ1bmEuZnVzaWdlckBnbWFpbC5jb20iLCJuYmYiOjE2Njc3NTM2NjksImV4cCI6MTY2NzkyNjQ2OSwiaWF0IjoxNjY3NzUzNjY5fQ.1cY4N_r5TJmc97APX30T-CZ7Nyu-JxIAdjIQRqQUi64",
                            RefreshTokenExpiry = new DateTime(2022, 11, 8, 16, 54, 29, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 181, 33, 139, 219, 137, 32, 165, 64, 148, 15, 110, 39, 18, 99, 163, 72, 115, 217, 5, 90, 201, 100, 143, 241, 126, 12, 121, 195, 113, 54, 245, 107, 76, 159, 9, 225, 170, 19, 196, 151 },
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 976, DateTimeKind.Local).AddTicks(7253),
                            Username = "brunaManager"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc01hbmFnZXIiLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzc1MzY3MCwiZXhwIjoxNjY3Nzk2ODcwLCJpYXQiOjE2Njc3NTM2NzB9.Wd10HMKT6OCadWZT9EcEn3S8toafdKd2fPkyfKuHiHA",
                            AccessTokenExpiry = new DateTime(2022, 11, 7, 4, 54, 30, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 17, DateTimeKind.Local).AddTicks(2631),
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "kcomEk8tf+sfiE4OdD/KvqEc66/LmmdxvxCH27Mh4jY=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzTWFuYWdlciIsImVtYWlsIjoibHVjYXNvbGl2ZWlyYS5jb250YXRvbmxpbmVAZ21haWwuY29tIiwibmJmIjoxNjY3NzUzNjcwLCJleHAiOjE2Njc5MjY0NzAsImlhdCI6MTY2Nzc1MzY3MH0.hJGYfEfkIBG_ob-6LvNdFSpOEk5jZBpiNLPoZYFHeVc",
                            RefreshTokenExpiry = new DateTime(2022, 11, 8, 16, 54, 30, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 88, 16, 194, 200, 201, 168, 19, 232, 192, 135, 232, 250, 144, 223, 175, 19, 0, 8, 238, 33, 117, 51, 98, 41, 162, 11, 42, 161, 247, 146, 194, 215, 104, 223, 93, 254, 75, 71, 209, 164 },
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 17, DateTimeKind.Local).AddTicks(2636),
                            Username = "lucasManager"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("EtherWallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "0x83596d3984C65c48D9f167ada9698BECFa709571",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 976, DateTimeKind.Local).AddTicks(6912),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            IsDeleted = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x879b22729079d26717c15544e85f3692229b481368ea4b5a65ca289a5c26db53",
                            PublicKey = "0489249214e77e5d07d2de2e63b82f5e2029e4d0d739a341a166e6363db1c338e749f11823ded16954ba15070dd496f109a9655c7b9cd08417538ed5ac8d1216b2",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 29, 976, DateTimeKind.Local).AddTicks(6942),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 2,
                            Address = "0xd49B964c84132F43e3d1Ed3A7b67B57304Cb6fB3",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 17, DateTimeKind.Local).AddTicks(2332),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            IsDeleted = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x830226e76d7cb5d86d6b2754a4626984cfffbfc8cb477e3665877d753da9111f",
                            PublicKey = "045a0df1485dd7614bc5eb51b5612638040d5f835d1c310320ad73a051eb0391f5f953aa3c701b3e6ec8efaee2217adbfb32fb78f27eaef8203b9d6e5417f1f129",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 17, DateTimeKind.Local).AddTicks(2354),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 3,
                            Address = "0xecE385e3Fd686DA0959e375E155B036C3eb34774",
                            CreatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 59, DateTimeKind.Local).AddTicks(844),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            IsDeleted = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x5178945d19f0a66cfaa52cb4b03a139d402bb682a13aaf94e75ba74bb26f55e5",
                            PublicKey = "04c8867096480458cfdebf46cef3132bb0f17ab94a53de0192ff8ef25994ce19960c7cdd0a1f1d5513e270be4898cb5c0c20e6b5044f0dd49c1844e519d331e921",
                            UpdatedAt = new DateTime(2022, 11, 6, 6, 54, 30, 59, DateTimeKind.Local).AddTicks(874),
                            UpdatedBy = "SYSTEM SEED"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EcommerceAdminId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceAdminId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleBond");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("ApiCredentials")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceManager", "Manager")
                        .WithOne("Ecommerce")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Ecommerce", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("Admins")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("EtherWallets")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceAdmin", "EcommerceAdmin")
                        .WithMany("RoleBonds")
                        .HasForeignKey("EcommerceAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.Role", "Role")
                        .WithMany("RoleBonds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceAdmin");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("ApiCredentials");

                    b.Navigation("EtherWallets");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Navigation("RoleBonds");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleBonds");
                });
#pragma warning restore 612, 618
        }
    }
}
