// <auto-generated />
using System;
using Ecoinmerce.Infra.Repository.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecoinmerce.Infra.Repository.Migrations.Ecommerce
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20221107212821_RenamingColumn")]
    partial class RenamingColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ValidityInDays")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("ApiCredentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjY3ODU2NTAwLCJleHAiOjE2Njk1ODQ1MDAsImlhdCI6MTY2Nzg1NjUwMH0.IcL_QkUCdhxn9eeAzjapGCRmogxXIVrPg3K8vDXNzR0",
                            AccessTokenExpiry = new DateTime(2022, 11, 27, 21, 28, 20, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 472, DateTimeKind.Local).AddTicks(1821),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 1,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 472, DateTimeKind.Local).AddTicks(1822),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjY3ODU2NTAwLCJleHAiOjE2Njk1ODQ1MDAsImlhdCI6MTY2Nzg1NjUwMH0.TW__Mmr-zecDyZ6fxYFn0yMGBAA_QU8RO27teh84-xA",
                            AccessTokenExpiry = new DateTime(2022, 11, 27, 21, 28, 20, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 516, DateTimeKind.Local).AddTicks(3321),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 2,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 516, DateTimeKind.Local).AddTicks(3322),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzg1NjUwMCwiZXhwIjoxNjY5NTg0NTAwLCJpYXQiOjE2Njc4NTY1MDB9.0_ftabRbezStHa-fBJHhpxBP-qSkSyclwodvQ6ex6Kc",
                            AccessTokenExpiry = new DateTime(2022, 11, 27, 21, 28, 20, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 559, DateTimeKind.Local).AddTicks(3388),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 3,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 559, DateTimeKind.Local).AddTicks(3389),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AverageAnnualBilling")
                        .HasColumnType("int");

                    b.Property<int?>("AverageTotalEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SocialReason")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.HasIndex("Cnpj", "Email")
                        .IsUnique();

                    b.ToTable("Ecommerces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageAnnualBilling = 10000000,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 472, DateTimeKind.Local).AddTicks(1807),
                            Email = "angelopiletti@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 1,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 472, DateTimeKind.Local).AddTicks(1811),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 2,
                            AverageAnnualBilling = 10000000,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 516, DateTimeKind.Local).AddTicks(3306),
                            Email = "bruna.fusiger@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 2,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 516, DateTimeKind.Local).AddTicks(3309),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 3,
                            AverageAnnualBilling = 10000000,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 559, DateTimeKind.Local).AddTicks(3373),
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 3,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 559, DateTimeKind.Local).AddTicks(3377),
                            Website = "https://google.com"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvQWRtaW4iLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwicm9sZSI6IiIsIm5iZiI6MTY2Nzg1NjUwMCwiZXhwIjoxNjY3ODk5NzAwLCJpYXQiOjE2Njc4NTY1MDB9.yXcnMxm0bxpHMb21URkAOZld3B7b7L99m3TwqLl44ik",
                            AccessTokenExpiry = new DateTime(2022, 11, 8, 9, 28, 20, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 454, DateTimeKind.Local).AddTicks(1457),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "WJaFWuhBA9kOEI/epFxS+clS5xPMEaXmlFipfoqagz8=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb0FkbWluIiwiZW1haWwiOiJhbmdlbG9waWxldHRpQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzg1NjUwMCwiZXhwIjoxNjY4MDI5MzAwLCJpYXQiOjE2Njc4NTY1MDB9.GIk70Tq_etZKfizDrCSXQRvFSSo7Yx4smWDEhoTGa8I",
                            RefreshTokenExpiry = new DateTime(2022, 11, 9, 21, 28, 20, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 185, 158, 193, 254, 220, 60, 175, 108, 185, 86, 123, 18, 56, 124, 225, 80, 217, 240, 193, 244, 246, 190, 99, 13, 46, 64, 132, 140, 162, 56, 190, 44, 227, 252, 60, 57, 142, 244, 218, 246 },
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 454, DateTimeKind.Local).AddTicks(1459),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "angeloAdmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYUFkbWluIiwiZW1haWwiOiJicnVuYS5mdXNpZ2VyQGdtYWlsLmNvbSIsInJvbGUiOiIiLCJuYmYiOjE2Njc4NTY1MDAsImV4cCI6MTY2Nzg5OTcwMCwiaWF0IjoxNjY3ODU2NTAwfQ.0ZFJ_4ezOhIXs6an0JWy2R7kXHp5HmiOteKNBBYRsRo",
                            AccessTokenExpiry = new DateTime(2022, 11, 8, 9, 28, 20, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 498, DateTimeKind.Local).AddTicks(3053),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "zDT85REBe+ch95neSWO0o5avJEQ+oruDj4baDQ2LoTU=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hQWRtaW4iLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjY3ODU2NTAwLCJleHAiOjE2NjgwMjkzMDAsImlhdCI6MTY2Nzg1NjUwMH0.Mmvkx78IL9hrT4YDTPgrx1FnXImBoHZsPfcSPpA8YHc",
                            RefreshTokenExpiry = new DateTime(2022, 11, 9, 21, 28, 20, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 207, 132, 102, 229, 140, 123, 243, 13, 80, 254, 92, 216, 239, 76, 70, 207, 24, 255, 46, 177, 167, 110, 38, 27, 23, 72, 105, 229, 220, 27, 113, 16, 233, 175, 71, 17, 154, 155, 172, 172 },
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 498, DateTimeKind.Local).AddTicks(3054),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "brunaAdmin"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc0FkbWluIiwiZW1haWwiOiJsdWNhc29saXZlaXJhLmNvbnRhdG9ubGluZUBnbWFpbC5jb20iLCJyb2xlIjoiIiwibmJmIjoxNjY3ODU2NTAwLCJleHAiOjE2Njc4OTk3MDAsImlhdCI6MTY2Nzg1NjUwMH0.OctLmNDeo1wf9_uCTklzY7a_HylOFVIZfQ2TMGQ0Euk",
                            AccessTokenExpiry = new DateTime(2022, 11, 8, 9, 28, 20, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 542, DateTimeKind.Local).AddTicks(1916),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "j1l16bp52ZXx3sQltxKrYQPG9BZXSi54AnZWGPiMINM=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzQWRtaW4iLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzg1NjUwMCwiZXhwIjoxNjY4MDI5MzAwLCJpYXQiOjE2Njc4NTY1MDB9.yhjtFT-TEHR8fuQKkyAXlIvP-z0Cif4TmCB2pBu8b6U",
                            RefreshTokenExpiry = new DateTime(2022, 11, 9, 21, 28, 20, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 165, 242, 9, 82, 43, 172, 190, 17, 196, 75, 72, 28, 17, 124, 190, 166, 94, 52, 144, 205, 139, 28, 58, 195, 45, 4, 19, 194, 36, 158, 8, 154, 168, 41, 125, 222, 36, 135, 218, 221 },
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 542, DateTimeKind.Local).AddTicks(1918),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "lucasAdmin"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvTWFuYWdlciIsImVtYWlsIjoiYW5nZWxvcGlsZXR0aUBnbWFpbC5jb20iLCJuYmYiOjE2Njc4NTY1MDAsImV4cCI6MTY2Nzg5OTcwMCwiaWF0IjoxNjY3ODU2NTAwfQ.bsDJXT__C5ljuqHuwzSy2dIRTPT_BvEHS0TMgRbYRGk",
                            AccessTokenExpiry = new DateTime(2022, 11, 8, 9, 28, 20, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 435, DateTimeKind.Local).AddTicks(9647),
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "3i27FfmGMT02QRztTDx4NTCmPLxW6siYSWdbbywWARM=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb01hbmFnZXIiLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjY3ODU2NTAwLCJleHAiOjE2NjgwMjkzMDAsImlhdCI6MTY2Nzg1NjUwMH0.ioZtPffDPjL7NLwIxiv2l63wjayFBu6lHj2fx9ptrrM",
                            RefreshTokenExpiry = new DateTime(2022, 11, 9, 21, 28, 20, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 93, 226, 103, 219, 180, 231, 246, 79, 8, 77, 245, 62, 169, 2, 29, 156, 158, 197, 130, 105, 184, 214, 109, 251, 9, 74, 222, 246, 254, 133, 83, 32, 157, 5, 146, 245, 202, 213, 196, 244 },
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 435, DateTimeKind.Local).AddTicks(9663),
                            Username = "angeloManager"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYU1hbmFnZXIiLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjY3ODU2NTAwLCJleHAiOjE2Njc4OTk3MDAsImlhdCI6MTY2Nzg1NjUwMH0.QcnbUr6yV3yQcaupRfwRdQjTxDgOO5oZpjdXMcmlGM4",
                            AccessTokenExpiry = new DateTime(2022, 11, 8, 9, 28, 20, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 480, DateTimeKind.Local).AddTicks(3326),
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "4oLm1Clfv1Bktfk+aEjfWH6Mlr/Hqgmh1lWnTqXq9XA=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hTWFuYWdlciIsImVtYWlsIjoiYnJ1bmEuZnVzaWdlckBnbWFpbC5jb20iLCJuYmYiOjE2Njc4NTY1MDAsImV4cCI6MTY2ODAyOTMwMCwiaWF0IjoxNjY3ODU2NTAwfQ.tJYji6n-RD2WoE9Q4DFJrE3-4tjeNwXWOqI9849jWgk",
                            RefreshTokenExpiry = new DateTime(2022, 11, 9, 21, 28, 20, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 58, 182, 25, 149, 205, 205, 115, 3, 212, 253, 192, 74, 116, 20, 121, 87, 34, 5, 241, 50, 143, 4, 176, 11, 221, 192, 249, 2, 193, 230, 36, 63, 142, 186, 247, 6, 211, 177, 184, 130 },
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 480, DateTimeKind.Local).AddTicks(3329),
                            Username = "brunaManager"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc01hbmFnZXIiLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY2Nzg1NjUwMCwiZXhwIjoxNjY3ODk5NzAwLCJpYXQiOjE2Njc4NTY1MDB9.wOKnxnE74o_jIKvmlbSOTECIuF0RUdjjgvgrWUtBm3k",
                            AccessTokenExpiry = new DateTime(2022, 11, 8, 9, 28, 20, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 524, DateTimeKind.Local).AddTicks(4463),
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "2EjA5GhFt0GB66p9STxM4PHd4kd9A93BCNPqtBOyDaQ=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzTWFuYWdlciIsImVtYWlsIjoibHVjYXNvbGl2ZWlyYS5jb250YXRvbmxpbmVAZ21haWwuY29tIiwibmJmIjoxNjY3ODU2NTAwLCJleHAiOjE2NjgwMjkzMDAsImlhdCI6MTY2Nzg1NjUwMH0.p-eGWxUgVNJX2uDmWvGWhR1qI4b9wFUzdmXvVgR9ohw",
                            RefreshTokenExpiry = new DateTime(2022, 11, 9, 21, 28, 20, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 36, 112, 198, 36, 174, 72, 40, 254, 29, 187, 160, 72, 224, 36, 109, 5, 188, 82, 42, 84, 92, 191, 99, 215, 137, 29, 198, 48, 40, 233, 158, 102, 63, 245, 117, 215, 84, 115, 46, 226 },
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 524, DateTimeKind.Local).AddTicks(4467),
                            Username = "lucasManager"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("EtherWallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "0x83596d3984C65c48D9f167ada9698BECFa709571",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 480, DateTimeKind.Local).AddTicks(2953),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            IsDeleted = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x879b22729079d26717c15544e85f3692229b481368ea4b5a65ca289a5c26db53",
                            PublicKey = "0489249214e77e5d07d2de2e63b82f5e2029e4d0d739a341a166e6363db1c338e749f11823ded16954ba15070dd496f109a9655c7b9cd08417538ed5ac8d1216b2",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 480, DateTimeKind.Local).AddTicks(2964),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 2,
                            Address = "0xd49B964c84132F43e3d1Ed3A7b67B57304Cb6fB3",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 524, DateTimeKind.Local).AddTicks(4108),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            IsDeleted = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x830226e76d7cb5d86d6b2754a4626984cfffbfc8cb477e3665877d753da9111f",
                            PublicKey = "045a0df1485dd7614bc5eb51b5612638040d5f835d1c310320ad73a051eb0391f5f953aa3c701b3e6ec8efaee2217adbfb32fb78f27eaef8203b9d6e5417f1f129",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 524, DateTimeKind.Local).AddTicks(4115),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 3,
                            Address = "0xecE385e3Fd686DA0959e375E155B036C3eb34774",
                            CreatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 567, DateTimeKind.Local).AddTicks(784),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            IsDeleted = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x5178945d19f0a66cfaa52cb4b03a139d402bb682a13aaf94e75ba74bb26f55e5",
                            PublicKey = "04c8867096480458cfdebf46cef3132bb0f17ab94a53de0192ff8ef25994ce19960c7cdd0a1f1d5513e270be4898cb5c0c20e6b5044f0dd49c1844e519d331e921",
                            UpdatedAt = new DateTime(2022, 11, 7, 18, 28, 20, 567, DateTimeKind.Local).AddTicks(798),
                            UpdatedBy = "SYSTEM SEED"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EcommerceAdminId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceAdminId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleBond");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("ApiCredentials")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceManager", "Manager")
                        .WithOne("Ecommerce")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Ecommerce", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("Admins")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("EtherWallets")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceAdmin", "EcommerceAdmin")
                        .WithMany("RoleBonds")
                        .HasForeignKey("EcommerceAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.Role", "Role")
                        .WithMany("RoleBonds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceAdmin");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("ApiCredentials");

                    b.Navigation("EtherWallets");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Navigation("RoleBonds");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleBonds");
                });
#pragma warning restore 612, 618
        }
    }
}
