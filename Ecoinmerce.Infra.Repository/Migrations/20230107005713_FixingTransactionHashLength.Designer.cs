// <auto-generated />
using System;
using Ecoinmerce.Infra.Repository.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecoinmerce.Infra.Repository.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20230107005713_FixingTransactionHashLength")]
    partial class FixingTransactionHashLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ValidityInDays")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("ApiCredentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjczMDUzMDMzLCJleHAiOjE2NzQ3ODEwMzMsImlhdCI6MTY3MzA1MzAzM30.0CiYRwfyZ4RCEaF53SF5Ii7BfV2MDf8vrAS93pgBVrc",
                            AccessTokenExpiry = new DateTime(2023, 1, 27, 0, 57, 13, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 158, DateTimeKind.Local).AddTicks(1526),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 1,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 158, DateTimeKind.Local).AddTicks(1527),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjczMDUzMDMzLCJleHAiOjE2NzQ3ODEwMzMsImlhdCI6MTY3MzA1MzAzM30.wgBtqMPlYaJkCT14v9RqsNKUy4YyX-m_SdR3KC53qeg",
                            AccessTokenExpiry = new DateTime(2023, 1, 27, 0, 57, 13, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 183, DateTimeKind.Local).AddTicks(7357),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 2,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 183, DateTimeKind.Local).AddTicks(7358),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1MzAzMywiZXhwIjoxNjc0NzgxMDMzLCJpYXQiOjE2NzMwNTMwMzN9.QL4JYL6323k3274MQ05hA3GsVoSvnvBR7eVgrRG5dYg",
                            AccessTokenExpiry = new DateTime(2023, 1, 27, 0, 57, 13, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 209, DateTimeKind.Local).AddTicks(6656),
                            CreatedBy = "SYSTEM SEED",
                            Description = "Esse aqui é um api credencial criado automaticamente como teste",
                            EcommerceId = 3,
                            Name = "TESTE Credencial",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 209, DateTimeKind.Local).AddTicks(6656),
                            UpdatedBy = "SYSTEM SEED",
                            ValidityInDays = 20
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("AverageAnnualBilling")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("AverageTotalEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SocialReason")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.HasIndex("Cnpj", "Email")
                        .IsUnique();

                    b.ToTable("Ecommerces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageAnnualBilling = 10000000m,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 158, DateTimeKind.Local).AddTicks(1518),
                            Email = "angelopiletti@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 1,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 158, DateTimeKind.Local).AddTicks(1520),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 2,
                            AverageAnnualBilling = 10000000m,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 183, DateTimeKind.Local).AddTicks(7345),
                            Email = "bruna.fusiger@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 2,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 183, DateTimeKind.Local).AddTicks(7350),
                            Website = "https://google.com"
                        },
                        new
                        {
                            Id = 3,
                            AverageAnnualBilling = 10000000m,
                            AverageTotalEmployees = 100,
                            Cep = "93270420",
                            Cnpj = "74544297000192",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 209, DateTimeKind.Local).AddTicks(6648),
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FantasyName = "TEST Nome Fantasia",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            ManagerId = 3,
                            Phone = "5134732749",
                            SocialReason = "TEST S.A",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 209, DateTimeKind.Local).AddTicks(6649),
                            Website = "https://google.com"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvQWRtaW4iLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwicm9sZSI6IiIsIm5iZiI6MTY3MzA1MzAzMywiZXhwIjoxNjczMDk2MjMzLCJpYXQiOjE2NzMwNTMwMzN9.LqYc7MJxoA6t8z17sQ5fxyGGMoDsUq7ZLKw7kybrxKg",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 57, 13, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 148, DateTimeKind.Local).AddTicks(198),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "jqoTkBb6fK9ioMGwVAlvUIroGsQeXjh/ilCVqzXpspU=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb0FkbWluIiwiZW1haWwiOiJhbmdlbG9waWxldHRpQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1MzAzMywiZXhwIjoxNjczMjI1ODMzLCJpYXQiOjE2NzMwNTMwMzN9.b8glZhkHaUDgULxxct2FQm6L9gVIruEsjyVTJeVB6yQ",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 57, 13, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 224, 56, 78, 201, 209, 147, 236, 10, 245, 181, 102, 2, 107, 226, 211, 204, 92, 109, 161, 253, 246, 119, 213, 74, 39, 43, 86, 138, 214, 64, 50, 198, 97, 45, 176, 102, 91, 46, 224, 192 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 148, DateTimeKind.Local).AddTicks(202),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "angeloAdmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYUFkbWluIiwiZW1haWwiOiJicnVuYS5mdXNpZ2VyQGdtYWlsLmNvbSIsInJvbGUiOiIiLCJuYmYiOjE2NzMwNTMwMzMsImV4cCI6MTY3MzA5NjIzMywiaWF0IjoxNjczMDUzMDMzfQ.Ur2tfPSxd66H6eIGK9QMPiD2hJxo1oNx3CWVHGaENUo",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 57, 13, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 173, DateTimeKind.Local).AddTicks(4154),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "B7Z/2Hgwg2zVaN2XOo0N0QPFoB6EIqAGNv7Eed3k/r8=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hQWRtaW4iLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjczMDUzMDMzLCJleHAiOjE2NzMyMjU4MzMsImlhdCI6MTY3MzA1MzAzM30.oJPPmxvHgrnl5JpYgM-VglIbo8nO8k1shrAV9r42sL4",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 57, 13, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 76, 90, 135, 198, 141, 233, 160, 100, 191, 0, 135, 91, 150, 79, 80, 97, 197, 215, 250, 125, 179, 140, 5, 161, 168, 239, 214, 17, 180, 221, 184, 133, 115, 146, 51, 86, 156, 26, 133, 1 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 173, DateTimeKind.Local).AddTicks(4155),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "brunaAdmin"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc0FkbWluIiwiZW1haWwiOiJsdWNhc29saXZlaXJhLmNvbnRhdG9ubGluZUBnbWFpbC5jb20iLCJyb2xlIjoiIiwibmJmIjoxNjczMDUzMDMzLCJleHAiOjE2NzMwOTYyMzMsImlhdCI6MTY3MzA1MzAzM30.V6jP__MJlSNIyVoQWi9U3xNZh-Cvw0E0usgmoHP5lJU",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 57, 13, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 198, DateTimeKind.Local).AddTicks(8705),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "CljyfCl1aYsf8jxtYhewu0tTZEtA3Muop/8H/PAWQWs=",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzQWRtaW4iLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1MzAzMywiZXhwIjoxNjczMjI1ODMzLCJpYXQiOjE2NzMwNTMwMzN9.ec6oCg-4VxAvA5ggzTMEIXwSpdVOfkyFzaPDnMfu_0s",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 57, 13, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 176, 56, 163, 16, 77, 18, 194, 222, 203, 0, 38, 209, 182, 138, 144, 210, 58, 181, 23, 213, 183, 142, 108, 131, 234, 188, 118, 130, 223, 137, 46, 70, 248, 41, 250, 186, 138, 7, 108, 107 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 198, DateTimeKind.Local).AddTicks(8706),
                            UpdatedBy = "SYSTEM SEED",
                            Username = "lucasAdmin"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime?>("AccessTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("ConfirmationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailConfirmed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("EcommerceManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFuZ2VsbyIsIlVzZXJuYW1lIjoiYW5nZWxvTWFuYWdlciIsImVtYWlsIjoiYW5nZWxvcGlsZXR0aUBnbWFpbC5jb20iLCJuYmYiOjE2NzMwNTMwMzMsImV4cCI6MTY3MzA5NjIzMywiaWF0IjoxNjczMDUzMDMzfQ.ZRoA1oZ8WK2Ch759I0kolWMnKPHKNh2GFE6ZZ3BKdE4",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 57, 13, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 137, DateTimeKind.Local).AddTicks(1905),
                            EcommerceId = 1,
                            Email = "angelopiletti@gmail.com",
                            FirstName = "Angelo",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Schuler Piletti",
                            Password = "h3je7yvZ7Db+O+za36f7CUcXIvkwrM05RJVTFmNaSgg=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImFuZ2Vsb01hbmFnZXIiLCJlbWFpbCI6ImFuZ2Vsb3BpbGV0dGlAZ21haWwuY29tIiwibmJmIjoxNjczMDUzMDMzLCJleHAiOjE2NzMyMjU4MzMsImlhdCI6MTY3MzA1MzAzM30.m_819zSBkSdVrL7sQJNCQbGxbs0E0WpfYrpP3z6Texo",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 57, 13, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 20, 141, 212, 61, 121, 44, 150, 51, 185, 210, 148, 78, 64, 254, 61, 187, 33, 1, 131, 53, 79, 121, 104, 89, 8, 17, 107, 186, 169, 154, 177, 23, 6, 255, 189, 114, 129, 68, 52, 41 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 137, DateTimeKind.Local).AddTicks(1914),
                            Username = "angeloManager"
                        },
                        new
                        {
                            Id = 2,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkJydW5hIiwiVXNlcm5hbWUiOiJicnVuYU1hbmFnZXIiLCJlbWFpbCI6ImJydW5hLmZ1c2lnZXJAZ21haWwuY29tIiwibmJmIjoxNjczMDUzMDMzLCJleHAiOjE2NzMwOTYyMzMsImlhdCI6MTY3MzA1MzAzM30.YY0a0TAHWVUG2Wecdl59Iso8IjhxGNH3yxX4yxRvFns",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 57, 13, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 163, DateTimeKind.Local).AddTicks(1804),
                            EcommerceId = 2,
                            Email = "bruna.fusiger@gmail.com",
                            FirstName = "Bruna",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Fusiger",
                            Password = "dMMHvNHubwJLfcTKPSbRatI0mCEFo7pjjoJ7W4tBsSk=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6ImJydW5hTWFuYWdlciIsImVtYWlsIjoiYnJ1bmEuZnVzaWdlckBnbWFpbC5jb20iLCJuYmYiOjE2NzMwNTMwMzMsImV4cCI6MTY3MzIyNTgzMywiaWF0IjoxNjczMDUzMDMzfQ.UfBlOjihCG-fzIXgDP2kjvLjNqbBteAXE8TR4xxiywE",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 57, 13, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 221, 206, 24, 254, 111, 163, 165, 26, 123, 136, 47, 238, 205, 160, 152, 225, 12, 254, 77, 196, 203, 42, 88, 255, 30, 255, 182, 194, 39, 113, 125, 84, 225, 194, 232, 132, 62, 185, 195, 202 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 163, DateTimeKind.Local).AddTicks(1805),
                            Username = "brunaManager"
                        },
                        new
                        {
                            Id = 3,
                            AccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ikx1Y2FzIiwiVXNlcm5hbWUiOiJsdWNhc01hbmFnZXIiLCJlbWFpbCI6Imx1Y2Fzb2xpdmVpcmEuY29udGF0b25saW5lQGdtYWlsLmNvbSIsIm5iZiI6MTY3MzA1MzAzMywiZXhwIjoxNjczMDk2MjMzLCJpYXQiOjE2NzMwNTMwMzN9.wBPE5RqWnOgzAEeXShItSSIAr0iRU8Utu0qkmoHrl-U",
                            AccessTokenExpiry = new DateTime(2023, 1, 7, 12, 57, 13, 0, DateTimeKind.Utc),
                            Cellphone = "51982505194",
                            Cpf = "05105784030",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 188, DateTimeKind.Local).AddTicks(4654),
                            EcommerceId = 3,
                            Email = "lucasoliveira.contatonline@gmail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            IsEmailConfirmed = true,
                            LastName = "Oliveira",
                            Password = "+oW0N6bdRqaXG/bo30OpXEXJatogS7wzfAhjZLDGNY4=",
                            Phone = "5134732749",
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6Imx1Y2FzTWFuYWdlciIsImVtYWlsIjoibHVjYXNvbGl2ZWlyYS5jb250YXRvbmxpbmVAZ21haWwuY29tIiwibmJmIjoxNjczMDUzMDMzLCJleHAiOjE2NzMyMjU4MzMsImlhdCI6MTY3MzA1MzAzM30.8YcWQG-SAsMnuFkyPNjyhjVs4lXWx24Jqf3wPTyYbcQ",
                            RefreshTokenExpiry = new DateTime(2023, 1, 9, 0, 57, 13, 0, DateTimeKind.Utc),
                            Salt = new byte[] { 139, 159, 74, 205, 41, 135, 246, 81, 252, 64, 154, 172, 192, 152, 128, 128, 217, 43, 98, 185, 22, 193, 83, 54, 85, 202, 132, 106, 179, 231, 234, 163, 49, 105, 144, 207, 182, 83, 56, 38 },
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 188, DateTimeKind.Local).AddTicks(4656),
                            Username = "lucasManager"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInternalCustody")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.ToTable("EtherWallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "0x83596d3984C65c48D9f167ada9698BECFa709571",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 163, DateTimeKind.Local).AddTicks(1546),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 1,
                            IsDeleted = false,
                            IsInternalCustody = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x879b22729079d26717c15544e85f3692229b481368ea4b5a65ca289a5c26db53",
                            PublicKey = "0489249214e77e5d07d2de2e63b82f5e2029e4d0d739a341a166e6363db1c338e749f11823ded16954ba15070dd496f109a9655c7b9cd08417538ed5ac8d1216b2",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 163, DateTimeKind.Local).AddTicks(1557),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 2,
                            Address = "0xd49B964c84132F43e3d1Ed3A7b67B57304Cb6fB3",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 188, DateTimeKind.Local).AddTicks(4402),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 2,
                            IsDeleted = false,
                            IsInternalCustody = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x830226e76d7cb5d86d6b2754a4626984cfffbfc8cb477e3665877d753da9111f",
                            PublicKey = "045a0df1485dd7614bc5eb51b5612638040d5f835d1c310320ad73a051eb0391f5f953aa3c701b3e6ec8efaee2217adbfb32fb78f27eaef8203b9d6e5417f1f129",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 188, DateTimeKind.Local).AddTicks(4405),
                            UpdatedBy = "SYSTEM SEED"
                        },
                        new
                        {
                            Id = 3,
                            Address = "0xecE385e3Fd686DA0959e375E155B036C3eb34774",
                            CreatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 214, DateTimeKind.Local).AddTicks(4737),
                            CreatedBy = "SYSTEM SEED",
                            EcommerceId = 3,
                            IsDeleted = false,
                            IsInternalCustody = false,
                            Name = "TEST Wallet",
                            PrivateKey = "0x5178945d19f0a66cfaa52cb4b03a139d402bb682a13aaf94e75ba74bb26f55e5",
                            PublicKey = "04c8867096480458cfdebf46cef3132bb0f17ab94a53de0192ff8ef25994ce19960c7cdd0a1f1d5513e270be4898cb5c0c20e6b5044f0dd49c1844e519d331e921",
                            UpdatedAt = new DateTime(2023, 1, 6, 21, 57, 13, 214, DateTimeKind.Local).AddTicks(4742),
                            UpdatedBy = "SYSTEM SEED"
                        });
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CostumerWalletAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EcommerceId")
                        .HasColumnType("int");

                    b.Property<string>("EcommerceWalletAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("Observation")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PurchaseCheckId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseEventFailId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseEventId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceId");

                    b.HasIndex("PurchaseCheckId")
                        .IsUnique();

                    b.HasIndex("PurchaseEventFailId")
                        .IsUnique();

                    b.HasIndex("PurchaseEventId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CheckOverCounter")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PurchaseChecks");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaidInEther")
                        .HasPrecision(28, 18)
                        .HasColumnType("decimal(28,18)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseIdentifier")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PurchaseEvents");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEventFail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("LogAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<string>("Observation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PurchaseEventFails");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EcommerceAdminId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceAdminId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleBond");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.ApiCredential", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("ApiCredentials")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceManager", "Manager")
                        .WithOne("Ecommerce")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Ecommerce", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("Admins")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EtherWallet", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("EtherWallets")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.Ecommerce", "Ecommerce")
                        .WithMany("Purchases")
                        .HasForeignKey("EcommerceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.PurchaseCheck", "PurchaseCheck")
                        .WithOne("Purchase")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Purchase", "PurchaseCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.PurchaseEventFail", "PurchaseEventFail")
                        .WithOne("Purchase")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Purchase", "PurchaseEventFailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.PurchaseEvent", "PurchaseEvent")
                        .WithOne("Purchase")
                        .HasForeignKey("Ecoinmerce.Domain.Entities.Purchase", "PurchaseEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ecommerce");

                    b.Navigation("PurchaseCheck");

                    b.Navigation("PurchaseEvent");

                    b.Navigation("PurchaseEventFail");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.RoleBond", b =>
                {
                    b.HasOne("Ecoinmerce.Domain.Entities.EcommerceAdmin", "EcommerceAdmin")
                        .WithMany("RoleBonds")
                        .HasForeignKey("EcommerceAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecoinmerce.Domain.Entities.Role", "Role")
                        .WithMany("RoleBonds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceAdmin");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Ecommerce", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("ApiCredentials");

                    b.Navigation("EtherWallets");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceAdmin", b =>
                {
                    b.Navigation("RoleBonds");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.EcommerceManager", b =>
                {
                    b.Navigation("Ecommerce");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseCheck", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEvent", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.PurchaseEventFail", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Ecoinmerce.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleBonds");
                });
#pragma warning restore 612, 618
        }
    }
}
